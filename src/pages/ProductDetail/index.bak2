import React, { useState, useEffect } from "react";
import SliderProductDetailContainer from "../../containers/SliderProductDetail";
import ProductAttibutes from "../../components/ProductAttributes";
import Variants from "../../containers/Variants";
import { Redirect } from "react-router-dom";
import { Row, Col, Card, Typography, Tabs } from "antd";
import currencyRupiah from "../../library/currency";
import Shipping from "../../components/Shipping";
import strings from "../../localization/localization";
import Quantity from "../../components/Quantity";
import { connect } from "react-redux";
import "./style.sass";
import { apiGetWithoutToken } from "../../api/services";
import { PATH_PRODUCT } from "../../api/path";
import Skeleton from "react-loading-skeleton";
import ProductQnA from "../../containers/ProductQnA";
import Breadcrumbs from "../../components/Breadcrumbs/index.js";
import Button from "../../components/Button";


const { Text } = Typography

function ProductDetail() {
  const [images, setImages] = useState([])
  const [imageVariant, setImageVariant] = useState({})
  const [information, setInformation] = useState({})
  const [defaultImage, setDefaultImage] = useState({})
  const [note, setNote] = useState(null)
  const [data, setData] = useState({ sku: {} })
  const [quantity,setQuantity] = useState(1)
  const [alertVariant,setAlertVariant] = useState("")
  const [videoUrl,setVideoUrl] = useState("")
  const [isUpdateImageVariant,setIsUpdateImageVariant] = useState(false)
  const [blurAlertVariant,setBlurAlertVariant] = useState(false)
  const [priceShipping,setPriceShipping] = useState(0)
  const [price, setPrice] = useState({})
  const [variants, setVariants] = useState([])
  const [changeCheckout, setChangeCheckout] = useState(false)
  const [open, setOpen] = useState(false)
  const [id, setId] = useState("")
  const [name, setName] = useState("")
  const [product, setProduct] = useState({})
  const [isProductAvailable, setIsProductAvailable] = useState(false)


  useEffect(()=>{
    window.scrollTo(0, 0)
    getProductDetail()
  },[])

 async function getProductDetail(){
    const productId = this.props.match.params.productId;
    try {
      const response = await apiGetWithoutToken(PATH_PRODUCT.PRODUCT_BY_ID + productId)
      const product = response.data.data;
      setImages(product.images)
      this.setState({
        information: product.information,
        price: product.price,
        defaultImage: product.defaultImage,
        id: product.id,
        images: product.images,
        isProductAvailable: true,
        product: product,
        variants: product.variants,
        videoUrl: product.videoUrl
      });
    } catch (error) {
      console.log(error);
    }
  };

  actionUpdateSku = (sku) => {
    const data = { ...this.state.data, sku };
    this.setState({ data });
  };

  actionUpdateQuantity = quantity => {
    this.setState({
      quantity: quantity,
      isUpdateImageVariant: false
    });
  };

  countTotalAmount = () => {
    const subTotal = this.state.price.fee && this.state.price.fee.shipmentFee.difference * this.state.quantity;
    const total = subTotal
    return total;
  }

  actionUpdateImageVariant = image => {
    this.setState({
      imageVariant: image,
      isUpdateImageVariant: true
    })
  };

  actionSubmitToCheckout = () => {
    const {
      id,
      note,
      price,
      images,
      data,
      information,
      quantity,
    } = this.state
    const image = images.find(image => image.isDefault === true).defaultImage;
    const items = {
      shipmentFee: price.fee.shipmentFee,
      image,
      name: information.name,
      price: price.amount,
      productId: id,
      quantity: quantity,
      note,
      sku: data.sku,
      maxOrder: information.maxOrder
    }
    const indexesToLocalstorage = JSON.stringify(items);
    localStorage.setItem("product", indexesToLocalstorage);
    if (this.state.variants.length > 0) {
      this.variantAlert();
    } else if (this.state.variants.length < 1) {
      if (this.props.isAuthenticated !== false) {
        this.redirectCheckout();
      } else {
        this.redirectLogin();
      }
    }
  };

  redirectLogin = () => {
    this.setState(prevState => ({
      open: !prevState.open
    }));
  }

  redirectCheckout = () => {
    this.setState(prevState => ({
      changeCheckout: !prevState.changeCheckout
    }));
  }

  variantAlert = () => {
    if (this.state.data.sku.length === undefined) {
      this.setState({ alertVariant: strings.product_detail_warning_variant_one_item, blurAlertVariant: true })
    } else {
      if (this.state.data.sku.length < this.state.variants.length) {
        this.setState({ alertVariant: strings.product_detail_warning_variant_two_item, blurAlertVariant: true })
      } else {
        if (this.props.isAuthenticated !== false) {
          this.redirectCheckout();
        } else {
          this.redirectLogin();
        }
      }
    }
  };


  let totalShipping = this.countTotalAmount();
  return (
    <React.Fragment>
      <Breadcrumbs information={this.state.information.name} />
      <div className="container mp-product-detail">
        <Row>
          <Col md={10}>
            <p className="mp-product-detail__product-name">{this.state.images.length < 1 ? <Skeleton height={20} /> : this.state.information.name}</p>
            {this.state.images.length < 1 ? <Skeleton height={300} /> :
              <SliderProductDetailContainer videoUrl={this.state.videoUrl} isUpdateImageVariant={this.state.isUpdateImageVariant} imageDefault={this.state.defaultImage} images={this.state.images} imageVariant={this.state.imageVariant} />}
          </Col>
          <Col md={12} offset={1}>
            <div>
              <p className="mp-product-detail__price">
                {this.state.images.length < 1 ? <Skeleton height={25} /> : (currencyRupiah(this.state.price.amount))}
              </p>
              {this.state.images.length < 1 ? <Skeleton height={25} width={200} /> :
                <Variants product={this.state.product} actionUpdateImageVariant={this.actionUpdateImageVariant} actionUpdateSku={this.actionUpdateSku} />}
              {this.state.images.length < 1 ?
                <div style={{ marginTop: 10 }}>
                  <Skeleton height={40} width={200} />
                </div>
                :
                <React.Fragment>
                  <span className="mp-product-detail__total-quantity">Jumlah</span>
                  <Quantity
                    stock={this.state.information.maxOrder}
                    updateQuantity={this.actionUpdateQuantity}
                  />
                </React.Fragment>
              }
              {this.state.isProductAvailable && (
                <Shipping totalShipping={totalShipping} actionUpdatePriceShipping={this.actionUpdatePriceShipping} priceShipment={this.state.price.fee} />)}
              {this.state.images.length < 1 ?
                <div style={{ marginTop: 55 }}>
                  <Skeleton height={40} width={350} />
                </div> :
                <div style={{ marginTop: 64 }}>
                  {this.state.blurAlertVariant === true ? <Text type="danger">{this.state.alertVariant}</Text> : null}
                  <Button
                    type="primary"
                    size="large"
                    width="full"
                    onClick={this.actionSubmitToCheckout}
                  >
                    {strings.order_now}
                  </Button>
                </div>
              }
            </div>
          </Col>
        </Row>
        <Tabs className="tabs-detail" defaultActiveKey="1" type="card">
          <Tabs.TabPane tab="DETAIL PRODUK" key="1">
            {this.state.isProductAvailable &&
              <Card className="product-description">
                <h2>{strings.detail_product}</h2>
                <ProductAttibutes
                  product={this.state.information}
                />
              </Card>}
          </Tabs.TabPane>
          <Tabs.TabPane tab="PERTANYAAN" key="2">
            <ProductQnA />
          </Tabs.TabPane>
        </Tabs>
      </div>
      {this.state.open === true && <Redirect to={{ pathname: "/login", state: { nextPage: "/checkout" } }} />}
      {this.state.changeCheckout === true && <Redirect to="/checkout" />}
    </React.Fragment>
  );
}

const mapStateToProps = state => ({
  isAuthenticated: state.authentication.isAuthenticated
});

export default connect(mapStateToProps)(ProductDetail);

